{"version":3,"sources":["components/Appbar/index.js","components/MenuBar/index.js","components/Charts/index.js","app/GridState/App.js","app/GetData/querys.js","App.js","serviceWorker.js","index.js"],"names":["useStyle","makeStyles","theme","backgroundBar","background","color","boxShadow","borderBottomLeftRadius","icon","height","width","Main","props","classes","AppBar","className","Toolbar","DeviceHubRounded","Typography","variant","style","flexGrow","IconButton","onClick","getData","RefreshRounded","href","GitHub","useTreeItemStyles","root","palette","text","secondary","backgroundColor","action","hover","grey","content","borderTopRightRadius","spacing","borderBottomRightRadius","paddingRight","fontWeight","typography","fontWeightMedium","fontWeightRegular","group","marginLeft","paddingLeft","expanded","selected","label","labelRoot","display","alignItems","padding","labelIcon","marginRight","labelText","StyledTreeItem","LabelIcon","labelInfo","bgColor","other","TreeItem","useStyles","GmailTreeView","TreeView","defaultSelected","defaultCollapseIcon","ArrowDropDown","defaultExpandIcon","ArrowRight","defaultEndIcon","handleValue","nodeId","BarChartRounded","AccountTreeRounded","countries","am4core","am4themes_animated","App","state","title","chart","this","index","am4charts","data","pieSeries","series","push","dataFields","value","category","dispose","id","Component","margin","marginTitle","tableTitle","AllDataDashboard","useState","setData","params","a","prevTotals","totals","keys","field","isSum","map","item","reduce","total","currentValue","Object","identy","filter","key","useEffect","length","CreateDash","Grid","container","xs","md","sm","Card","CardHeader","subheader","CardContent","textAlign","WebkitBackgroundClip","WebkitTextFillColor","parseFloat","Cases","toFixed","TableCountries","isLoading","components","Container","columns","icons","Search","SearchRounded","Clear","ClearRounded","FirstPage","FirstPageRounded","Check","CheckRounded","ThirdStateCheck","RemoveRounded","LastPage","LastPageRounded","Delete","NextPage","ChevronRightRounded","PreviousPage","ChevronLeftRounded","ResetSearch","SortArrow","ArrowUpwardRounded","options","maxBodyHeight","pageSize","pageSizeOptions","selection","setSelection","Hidden","xsDown","query","host","name","protocol","getHost","headers","fetch","then","res","json","Promise","resolve","catch","error","isError","obj","Array","isArray","k","join","Query","createMuiTheme","fontFamily","setIsLoading","getDataQuery","getAllCountries","responseData","ThemeProvider","CssBaseline","LinearProgress","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.4232734b.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { AppBar, Toolbar, Typography, makeStyles, IconButton } from '@material-ui/core';\r\nimport { DeviceHubRounded, GitHub, RefreshRounded } from '@material-ui/icons';\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    backgroundBar:{\r\n        background:\"linear-gradient(to right, #8e2de2, #4a00e0)\",\r\n        color:\"#FFFFFF\",\r\n        boxShadow:\"none\",\r\n        borderBottomLeftRadius:\"50px\"\r\n    },\r\n    icon:{\r\n        height:35,\r\n        width:35\r\n    }\r\n}))\r\n\r\nfunction Main(props){\r\n    const classes = useStyle();\r\n    return(\r\n        <Fragment>\r\n            <AppBar className={classes.backgroundBar}>\r\n                <Toolbar>\r\n                <DeviceHubRounded className={classes.icon}/>\r\n                <Typography\r\n                variant=\"h5\">\r\n                    <b>Covid</b> Track\r\n                </Typography>\r\n                <div style={{flexGrow:1}}/>\r\n                <IconButton onClick={() => props.getData()}>\r\n                    <RefreshRounded style={{color:\"#FFF\"}}/>\r\n                </IconButton>\r\n                <IconButton href=\"https://github.com/maldos23/covidtrack\">\r\n                    <GitHub style={{color:\"#FFF\"}}/>\r\n                </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\nimport { TreeItem, TreeView } from '@material-ui/lab';\r\nimport { ArrowDropDown, ArrowRight, BarChartRounded, AccountTreeRounded } from '@material-ui/icons';\r\n\r\nconst useTreeItemStyles = makeStyles(theme => ({\r\n  root: {\r\n    color: theme.palette.text.secondary,\r\n    '&:hover > $content': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n    '&:focus > $content, &$selected > $content': {\r\n      backgroundColor: `var(--tree-view-bg-color, ${theme.palette.grey[400]})`,\r\n      color: 'var(--tree-view-color)',\r\n    },\r\n    '&:focus > $content $label, &:hover > $content $label, &$selected > $content $label': {\r\n      backgroundColor: 'transparent',\r\n    },\r\n  },\r\n  content: {\r\n    color: theme.palette.text.secondary,\r\n    borderTopRightRadius: theme.spacing(2),\r\n    borderBottomRightRadius: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n    fontWeight: theme.typography.fontWeightMedium,\r\n    '$expanded > &': {\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n  },\r\n  group: {\r\n    marginLeft: 0,\r\n    '& $content': {\r\n      paddingLeft: theme.spacing(2),\r\n    },\r\n  },\r\n  expanded: {},\r\n  selected: {},\r\n  label: {\r\n    fontWeight: 'inherit',\r\n    color: 'inherit',\r\n  },\r\n  labelRoot: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0.5, 0),\r\n  },\r\n  labelIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  labelText: {\r\n    fontWeight: 'inherit',\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nfunction StyledTreeItem(props) {\r\n  const classes = useTreeItemStyles();\r\n  const { labelText, labelIcon: LabelIcon, labelInfo, color, bgColor, ...other } = props;\r\n\r\n  return (\r\n    <TreeItem\r\n      label={\r\n        <div className={classes.labelRoot}>\r\n          <LabelIcon color=\"inherit\" className={classes.labelIcon} />\r\n          <Typography variant=\"body2\" className={classes.labelText}>\r\n            {labelText}\r\n          </Typography>\r\n          <Typography variant=\"caption\" color=\"inherit\">\r\n            {labelInfo}\r\n          </Typography>\r\n        </div>\r\n      }\r\n      style={{\r\n        '--tree-view-color': color,\r\n        '--tree-view-bg-color': bgColor,\r\n      }}\r\n      classes={{\r\n        root: classes.root,\r\n        content: classes.content,\r\n        expanded: classes.expanded,\r\n        selected: classes.selected,\r\n        group: classes.group,\r\n        label: classes.label,\r\n      }}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nStyledTreeItem.propTypes = {\r\n  bgColor: PropTypes.string,\r\n  color: PropTypes.string,\r\n  labelIcon: PropTypes.elementType.isRequired,\r\n  labelInfo: PropTypes.string,\r\n  labelText: PropTypes.string.isRequired,\r\n};\r\n  \r\n  const useStyles = makeStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n  });\r\n  \r\n  export default function GmailTreeView(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      <TreeView\r\n        defaultSelected={[\"1\"]}\r\n        className={classes.root}\r\n        defaultCollapseIcon={<ArrowDropDown />}\r\n        defaultExpandIcon={<ArrowRight />}\r\n        defaultEndIcon={<div style={{ width: 24 }} />}>\r\n        <StyledTreeItem \r\n        onClick={()=>props.handleValue(0)} \r\n        nodeId=\"1\" \r\n        labelText=\"All\" \r\n        labelIcon={BarChartRounded}/>\r\n        <StyledTreeItem \r\n        onClick={()=>props.handleValue(1)} \r\n        nodeId=\"2\" \r\n        labelText=\"Countries\" \r\n        labelIcon={AccountTreeRounded} \r\n        labelInfo={props.countries}/>\r\n    </TreeView>\r\n    );\r\n}","import React, { Component } from 'react';\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\nclass App extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            title:null\r\n        }\r\n    }\r\n  componentDidMount() {\r\n    let chart = am4core.create(`chartdiv-${this.props.index}`, am4charts.PieChart);\r\n\r\n    chart.data = this.props.data;\r\n      \r\n      // Add and configure Series\r\n      var pieSeries = chart.series.push(new am4charts.PieSeries());\r\n      pieSeries.dataFields.value = \"value\";\r\n      pieSeries.dataFields.category = \"title\";\r\n\r\n    this.chart = chart;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.chart) {\r\n      this.chart.dispose();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div \r\n      id={`chartdiv-${this.props.index}`} \r\n      style={{ width: \"100%\", height: \"150px\" }}></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React, { useEffect, useState } from 'react';\r\nimport MenuBar from '../../components/MenuBar/index';\r\nimport Chart from '../../components/Charts/index';\r\nimport { Grid, makeStyles, Typography, Card, CardContent, Hidden, CardHeader } from '@material-ui/core';\r\nimport MaterialTable  from 'material-table';\r\nimport { SearchRounded, ClearRounded, FirstPageRounded, CheckRounded, RemoveRounded, LastPageRounded, ChevronRightRounded, ChevronLeftRounded, ArrowUpwardRounded } from '@material-ui/icons';\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    margin:{\r\n        margin:theme.spacing(1)\r\n    },\r\n    root:{\r\n        flexGrow:1\r\n    },\r\n    marginTitle:{\r\n        margin:theme.spacing(2),\r\n        color:\"#FFF\"\r\n    },\r\n    tableTitle:{\r\n        background:\"linear-gradient(to right, #8e2de2, #4a00e0)\",\r\n        borderBottomLeftRadius:\"25px\",\r\n    }\r\n}));\r\n\r\nfunction Main(props){\r\n    const classes = useStyle();\r\n    const {data} = props;\r\n    const [selection, setSelection] = useState(0);\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <Grid container>\r\n                <Grid item xs={12} sm={3} md={2}>\r\n                    <Hidden xsDown>\r\n                    <div style={{\r\n                        height:\"100px\"\r\n                    }}/>\r\n                    </Hidden>\r\n                    <div>\r\n                    <MenuBar handleValue={(value) => setSelection(value)} countries={data.length} />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} sm={9} md={10}>\r\n                    <div className={classes.margin}>\r\n                    {selection === 0 && <AllDataDashboard data={data} isLoading={props.isLoading}/>}\r\n                    {selection === 1 && <TableCountries data={data} isLoading={props.isLoading}/>}\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction AllDataDashboard(props){\r\n\r\n    const [data, setData] = useState([]);\r\n\r\n    async function CreateDash(params){\r\n        var prevTotals = {};\r\n        var totals = {};\r\n        var keys = [\r\n            {field:\"cases\", title:\"Cases\",isSum:false},\r\n            {field:\"todayCases\",title:\"Today Cases\",isSum:true},\r\n            {field:\"deaths\",title:\"Deaths\",isSum:true},\r\n            {field:\"todayDeaths\",title:\"Today Deaths\",isSum:true},\r\n            {field:\"recovered\",title:\"Recovered\",isSum:true},\r\n            {field:\"critical\",title:\"Critical\",isSum:true}\r\n        ];\r\n        \r\n        await keys.map(async(item) => prevTotals[item.field] = await params.reduce((total, currentValue) => (total + currentValue[item.field]),0));\r\n        \r\n        await Object.keys(prevTotals).map(async(item) => {\r\n            if(typeof prevTotals[item] === \"number\"){\r\n                var identy = keys.filter((key)=> key.field === item);\r\n                totals[identy[0].title] = prevTotals[item];\r\n            }\r\n        });\r\n\r\n        await setData(totals);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(props.data.length > 0){\r\n            CreateDash(props.data);\r\n        }\r\n    },[props.data]);\r\n\r\n    return(\r\n        <Grid container spacing={2}>\r\n            {Object.keys(data).length > 0 &&\r\n                Object.keys(data).map((item,index) => (\r\n                <Grid key={index} item xs={12} md={6} sm={4}>\r\n                    <Card>\r\n                        <CardHeader \r\n                        title={item}\r\n                        subheader={`Total: ${data[item]}`}/>\r\n                        <CardContent style={{textAlign:\"center\"}}>\r\n                            <Typography \r\n                            variant=\"h3\"\r\n                            style={{\r\n                                background:\"linear-gradient(to top, #ee0979, #ff6a00)\",\r\n                                WebkitBackgroundClip:\"text\",\r\n                                WebkitTextFillColor:\"transparent\"\r\n                            }}>\r\n                                <b>{`${parseFloat((data[item]/data.Cases)*100).toFixed(2)}%`}</b>\r\n                            </Typography>\r\n                        </CardContent>\r\n                        <CardContent style={{textAlign:\"center\",display:\"block\"}}>\r\n                            <Chart \r\n                            index={index}\r\n                            data={[\r\n                                {\r\n                                    title:\"Cases\",\r\n                                    value:data.Cases\r\n                                },\r\n                                {\r\n                                    title:item,\r\n                                    value:data[item]\r\n                                }\r\n                            ]}/>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n                ))\r\n            }\r\n            \r\n        </Grid>\r\n    )\r\n}\r\n\r\nfunction TableCountries(props){\r\n    const classes = useStyle();\r\n    return(\r\n        <MaterialTable\r\n        isLoading={props.isLoading}\r\n        title={\r\n            <div className={classes.tableTitle}>\r\n                <Typography \r\n                className={classes.marginTitle} \r\n                variant=\"h5\">\r\n                    Countries\r\n                </Typography>\r\n            </div>\r\n        }\r\n        components={{\r\n        Container:props => (\r\n            <Card>\r\n                <CardContent>\r\n                    <div {...props} style={{height:\"calc(100vh - 125px)\"}}/>\r\n                </CardContent>\r\n            </Card>\r\n        ),\r\n        }}\r\n        data={props.data}\r\n        columns={[\r\n            {field:\"country\", title:\"Country\"},\r\n            {field:\"cases\", title:\"Cases\"},\r\n            {field:\"todayCases\", title:\"Today Cases\"},\r\n            {field:\"deaths\", title:\"Deaths\"},\r\n            {field:\"todayDeaths\", title:\"Today Deaths\"},\r\n            {field:\"recovered\", title:\"Recovered\"},\r\n            {field:\"critical\", title:\"Critical\"},\r\n        ]}\r\n        icons={{\r\n            Search:SearchRounded,\r\n            Clear:ClearRounded,\r\n            FirstPage:FirstPageRounded,\r\n            Check:CheckRounded,\r\n            ThirdStateCheck:RemoveRounded,\r\n            LastPage:LastPageRounded,\r\n            Delete:ClearRounded,\r\n            NextPage:ChevronRightRounded,\r\n            PreviousPage:ChevronLeftRounded,\r\n            ResetSearch:ClearRounded,\r\n            SortArrow:ArrowUpwardRounded\r\n        }}\r\n        options={{\r\n            maxBodyHeight:\"calc(100vh - 220px)\",\r\n            pageSize:50,\r\n            pageSizeOptions:[50]\r\n        }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Main;","class query {\r\n    constructor(){\r\n        this.host = {\r\n            name:\"corona.lmao.ninja\",\r\n            protocol:\"https\",\r\n            getHost:() => `${this.host.protocol}://${this.host.name}/`\r\n        };\r\n        this.headers = {\r\n            \"Content-Type\":\"application/json\"\r\n        };\r\n    }\r\n\r\n    getAllCountries(){\r\n        return fetch(`${this.host.getHost()}countries`,this.headers)\r\n        .then(res => res.json())\r\n        .then(data => Promise.resolve(data))\r\n        .catch(error => Promise.resolve({isError:true,error:error}))\r\n    }\r\n\r\n    setQuery(obj){\r\n        if(typeof obj === \"object\" && Array.isArray(obj) === false){\r\n            var urlQuery = Object.keys(obj)\r\n            .map(k => k+'='+obj[k])\r\n            .join('&');\r\n            return urlQuery;\r\n        }else return \"\";\r\n    }\r\n}\r\n\r\nexport default query;","import React, {useState, useEffect} from 'react';\nimport { ThemeProvider, CssBaseline, createMuiTheme, LinearProgress } from '@material-ui/core';\nimport AppBarContent from './components/Appbar/index';\nimport AppContainer from './app/GridState/App';\nimport Query from './app/GetData/querys';\nimport 'typeface-roboto';\n\nconst query = new Query();\n\nconst theme = createMuiTheme({\n  typography:{\n    fontFamily:[\n      \"Roboto\"\n    ]\n  }\n});\n\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n    async function getDataQuery(){\n        await setIsLoading(true);\n        const responseData = await query.getAllCountries();\n        await setData(responseData);\n        await setIsLoading(false);\n    }\n\n    useEffect(() => {\n        getDataQuery();\n    },[]);\n\n  return (\n    <div>\n      <ThemeProvider theme={theme}>\n      <CssBaseline/>\n      <AppBarContent \n      getData={() => getDataQuery()}/>\n      <div style={{\n        height:\"65px\"\n      }}/>\n      {isLoading === true && <LinearProgress variant=\"query\"/>}\n      <AppContainer \n      getData={() => getDataQuery()}\n      isLoading={isLoading}\n      data={data}/>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}